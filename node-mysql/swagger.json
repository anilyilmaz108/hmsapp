{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample node-mysql app server for HMS. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.6",
    "title": "Swagger Node-Mysql",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "anilyilmaz108@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "http://localhost:3306",
  "basePath": "/swagger",
  "tags": [
    {
      "name": "Users",
      "description": "Everything about your Users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
        "name": "Feedbacks",
        "description": "Everything about your Feedbacks",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      },
      {
        "name": "Appointments",
        "description": "Everything about your Appointments",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      },
      {
        "name": "Payments",
        "description": "Everything about your Payments",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      }
  ],
  "schemes": ["http"],
  "paths": {
    "/users": {
        "get": {
          "tags": ["Users"],
          "summary": "Returns all users data",
          "description": "Returns a map of status codes to data",
          "operationId": "getInventory",
          "produces": ["application/json"],
          "parameters": [
          
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Users"
                  }
                }
            },
            "400": {
                "description": "Invalid Order"
              }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "post": {
            "tags": ["Users"],
            "summary": "Post user's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the users",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "put": {
            "tags": ["Users"],
            "summary": "Update user's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the feedbacks",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "delete": {
            "tags": ["Users"],
            "summary": "Delete user by ID",
            "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
            "operationId": "deleteOrder",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "userId",
                "in": "path",
                "description": "ID of the user that needs to be deleted",
                "required": true,
                "type": "integer",
                "minimum": 1,
                "format": "int64"
              }
            ],
            "responses": {
                "200": {
                "description": "Success",
                "schema": {
                    "$ref": "#/definitions/Users"
                    }
                },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "User not found"
              }
              
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
    "/users/{id}": {
        "get": {
            "tags": ["Users"],
            "summary": "Find user by ID",
            "operationId": "getOrderById",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "userId",
                "in": "path",
                "description": "ID of user that needs to be fetched",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
      "/feedbacks": {
        "get": {
          "tags": ["Feedbacks"],
          "summary": "Returns all feedbacks data",
          "description": "Returns a map of status codes to data",
          "operationId": "getInventory",
          "produces": ["application/json"],
          "parameters": [
          
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Feedbacks"
                  }
                }
            },
            "400": {
                "description": "Invalid Order"
              }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "post": {
            "tags": ["Feedbacks"],
            "summary": "Post feedback's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the feedbacks",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Feedbacks"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Feedbacks"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "put": {
            "tags": ["Feedbacks"],
            "summary": "Update feedback's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the feedbacks",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Feedbacks"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Feedbacks"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "delete": {
            "tags": ["Feedbacks"],
            "summary": "Delete feedback by ID",
            "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
            "operationId": "deleteOrder",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "feedbackId",
                "in": "path",
                "description": "ID of the feedback that needs to be deleted",
                "required": true,
                "type": "integer",
                "minimum": 1,
                "format": "int64"
              }
            ],
            "responses": {
                "200": {
                "description": "Success",
                "schema": {
                    "$ref": "#/definitions/Feedbacks"
                    }
                },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "feedback not found"
              }
              
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
    "/feedbacks/{id}": {
        "get": {
            "tags": ["Feedbacks"],
            "summary": "Find feedback by ID",
            "operationId": "getOrderById",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "feedbackId",
                "in": "path",
                "description": "ID of feedback that needs to be fetched",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "schema": {
                  "$ref": "#/definitions/Feedbacks"
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "feedback not found"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
      "/appointments": {
        "get": {
          "tags": ["Appointments"],
          "summary": "Returns all appointments data",
          "description": "Returns a map of status codes to data",
          "operationId": "getInventory",
          "produces": ["application/json"],
          "parameters": [
          
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Appointments"
                  }
                }
            },
            "400": {
                "description": "Invalid Order"
              }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "post": {
            "tags": ["Appointments"],
            "summary": "Post appointment's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the appointments",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Appointments"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Appointments"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "put": {
            "tags": ["Appointments"],
            "summary": "Update appointment's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the appointments",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Appointments"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Appointments"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "delete": {
            "tags": ["Appointments"],
            "summary": "Delete appointment by ID",
            "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
            "operationId": "deleteOrder",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "appointmentId",
                "in": "path",
                "description": "ID of the appointment that needs to be deleted",
                "required": true,
                "type": "integer",
                "minimum": 1,
                "format": "int64"
              }
            ],
            "responses": {
                "200": {
                "description": "Success",
                "schema": {
                    "$ref": "#/definitions/Appointments"
                    }
                },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Appointment not found"
              }
              
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
    "/appointments/{id}": {
        "get": {
            "tags": ["Appointments"],
            "summary": "Find appointment by ID",
            "operationId": "getOrderById",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "appointmentId",
                "in": "path",
                "description": "ID of appointment that needs to be fetched",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "schema": {
                  "$ref": "#/definitions/Appointments"
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "appointment not found"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
      "/payments": {
        "get": {
          "tags": ["Payments"],
          "summary": "Returns all payments data",
          "description": "Returns a map of status codes to data",
          "operationId": "getInventory",
          "produces": ["application/json"],
          "parameters": [
          
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Payments"
                  }
                }
            },
            "400": {
                "description": "Invalid Order"
              }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "post": {
            "tags": ["Payments"],
            "summary": "Post payment's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the payments",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Payments"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Payments"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "put": {
            "tags": ["Payments"],
            "summary": "Update payment's data",
            "description": "",
            "operationId": "placeOrder",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the payments",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Payments"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Payments"
                }
              },
              "400": {
                "description": "Invalid Order"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
        },
        "delete": {
            "tags": ["Payments"],
            "summary": "Delete payment by ID",
            "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
            "operationId": "deleteOrder",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "paymentId",
                "in": "path",
                "description": "ID of the payment that needs to be deleted",
                "required": true,
                "type": "integer",
                "minimum": 1,
                "format": "int64"
              }
            ],
            "responses": {
                "200": {
                "description": "Success",
                "schema": {
                    "$ref": "#/definitions/Payments"
                    }
                },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Payment not found"
              }
              
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      },
    "/payments/{id}": {
        "get": {
            "tags": ["Payments"],
            "summary": "Find payment by ID",
            "operationId": "getOrderById",
            "produces": ["application/json"],
            "parameters": [
              {
                "name": "paymentId",
                "in": "path",
                "description": "ID of payment that needs to be fetched",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "schema": {
                  "$ref": "#/definitions/Payments"
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "payment not found"
              }
            },
            "security": [
                {
                  "api_key": []
                }
              ]
          }
      }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "definitions": {
    "Users": {
        "type": "object",
        
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "role": {
            "type": "string",
            "example": "doctor"
          },
          "name": {
            "type": "string",
            "example": "UserName"
          },
          "surname": {
            "type": "string",
            "example": "UserLastName"
          },
          "about": {
            "type": "string",
            "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
          },
          "image": {
            "type": "string",
            "example": "https://slp-statics.astockcdn.net/static_assets/staging/22spring/free/browse-vector-categories-collections/Card4_399895799.jpg?width=580"
          },
          "email": {
            "type": "string",
            "example": "test@gmail.com"
          },
          "phone": {
            "type": "string",
            "example": "5556667788"
          },
          "department": {
            "type": "string",
            "example": "dentist"
          },
          "salary": {
            "type": "string",
            "example": "20000"
          },
          "started": {
            "type": "string",
            "example": "6/19/2015 5:35:50 PM"
          },
          "address": {
            "type": "string",
            "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry"
          },
          "staff": {
            "type": "string",
            "example": "fulltime"
          }
          
         
        },
        "xml": {
          "name": "Users"
        }
      },
      "Feedbacks": {
        "type": "object",
        
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "role": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "name": {
            "type": "string",
            "example": "nametest"
          },
          "surname": {
            "type": "string",
            "example": "surnametest"
          },
          "title": {
            "type": "string",
            "example": "What is Lorem Ipsum?"
          },
          "description": {
            "type": "string",
            "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
          },
          "date": {
            "type": "string",
            "example": "6/19/2015 5:35:50 PM"
          }
          
         
        },
        "xml": {
          "name": "Feedbacks"
        }
      },
      "Appointments": {
        "type": "object",
        
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "patient_id": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "name": {
            "type": "string",
            "example": "nametest"
          },
          "surname": {
            "type": "string",
            "example": "surnametest"
          },
          "phone": {
            "type": "string",
            "example": "What is Lorem Ipsum?"
          },
          "email": {
            "type": "string",
            "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
          },
          "age": {
            "type": "integer",
            "example": 25
          },
          "date": {
            "type": "string",
            "example": "6/19/2015 5:35:50 PM"
          },
          "symptoms": {
            "type": "string",
            "example": "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
          }
          
         
        },
        "xml": {
          "name": "Appointments"
        }
      },
      "Payments": {
        "type": "object",
        
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "payment_id": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "patient_id": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsK95g43FFgd12G4VC"
          },
          "name": {
            "type": "string",
            "example": "nametest"
          },
          "surname": {
            "type": "string",
            "example": "surnametest"
          },
          "doctor_name": {
            "type": "string",
            "example": "Prof. Dr. Test Deneme"
          },
          "salary": {
            "type": "string",
            "example": "30000"
          },
          "date": {
            "type": "string",
            "example": "6/19/2015 5:35:50 PM"
          },
          "operations": {
            "type": "string",
            "example": "Muayene - Röntgen - Tahlil - Reçete"
          }
          
         
        },
        "xml": {
          "name": "Payments"
        }
      }

  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
